================================================================================
# Git
================================================================================

Below notes are prepared mainly form Progit book, and some other sources.
Hope this will be useful for someone sometime.

Git basics
==========

git status
git status -s

git diff
git diff --cached
git diff --staged

git rm <filename>
git rm --cached <filename>

git mv <oldname> <newname>

git log useful options
----------------------

git log
git log --patch
git log -p

git log -2
git log --stat

git log --pretty=oneline
git log --pretty=short
git log --pretty=full
git log --pretty=fuller

git log --pretty=format:"%h - %an, %ar : %s"
git log --pretty=format:"%h - %an, %ar : %s" --graph
git log --oneline

git log --since=2.weeks
git log --after='2011'
git log --until='2018'
git log --author='John Doe'
git log --grep='.*foo.*'

git log -S function_name

git log -- <filename>
git log --no-merges


Undoing things
--------------

git commit -m 'initial commit'
git add forgotten_file
git commit --amend

git reset HEAD <filename>

^ Dangerous. Be cautios.
Above command unstages the file.

git checkout -- <filename>

^^ VERY dangerous. Use with care.
Above command discards changes in the file in working directory.

Working with remotes
--------------------

git remote
git remote -v

git remote add <shortname> <url>
git remote add pb https://github.com/paulboone/ticgit

git fetch pb
git pull
git push <remote> <branch>
git push origin master
git remote show <remote>

git remote rename pb paul
git remote rm paul


Tagging
-------

git tag
git tag -l "v1.8.5*"


Creating tags
.............

git tag -a v1.4 -m "my version 1.4"
git show v1.4
git tag v1.4-lw
git tag -a v1.2 9fceb02

git push origin <tagname>
git push origin --tags

git tag -d <tagname>
git push <remote> :refs/tags/<tagname>

git tag -d v1.4-lw
git push origin :refs/tags/v1.4-lw


Git aliases
-----------

git config alias.<alias> <command>
git config alias.co checkout

git config --global alias.visual '!gitk'

Git branching
=============

git branch <branchname>
git branch testing

git log --oneline --decorate

git checkout <branchname>
git checkout testing

git log --oneline --decorate --graph --all

git checkout -b testing

git branch -d testing

git mergetool

git branch
git branch -v
git branch --merged
git branch --no-merged
git branch --no-merged master

Remote branches
--------------- 
git ls-remote [remote]
git remote show [remote]

git clone <url>
git clone -o foobar <url>

git fetch <remote>
git fetch origin

git push <remote> <branch>
git push origin serverfix

git push origin serverfix:serverfix
git push origin serverfix:awesomebranch

git config --global credential.helper cache

^^ To use cache for git credentials. Not specific only to remote branches.

git merge origin/serverfix

git checkout -b serverfix origin/serverfix

git pull

git checkout --track origin/serverfix

git checkout serverfix

^^ If the branch name you’re trying to checkout (a) doesn’t exist and
(b) exactly matches a name on only one remote, Git will create a tracking
branch for you.

git checkout -b sf origin/serverfix

git branch -u origin/serverfix
git branch --set-upstream-to origin/serverfix

git merge @{u} 
git merge @{upstream} 

git branch -vv
git fetch --all; git branch -vv

Pulling
~~~~~~~

git pull

Generally it’s better to simply use the fetch and merge commands explicitly
as the magic of git pull can often be confusing.

Deleting remote branches
~~~~~~~~~~~~~~~~~~~~~~~~

git push origin --delete serverfix
git push <remote> --delete <branch>

Rebasing
--------

git checkout experiment
git rebase master

git checkout master
git merge experiment

git rebase --onto master server client
git checkout master
git merge client

git rebase <basebranch> <topicbranch>
git rebase master server
git checkout master
git merge server

git branch -d client
git branch -d server

